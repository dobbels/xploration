// file: XplorationOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package org.xploration.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: XplorationOntology.java
 * @author ontology bean generator
 * @version 2017/05/10, 22:02:17
 */
public class XplorationOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "Xploration";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new XplorationOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String ROVERREGISTRATIONINFO_CELL="cell";
    public static final String ROVERREGISTRATIONINFO_TEAM="team";
    public static final String ROVERREGISTRATIONINFO="RoverRegistrationInfo";
    public static final String MOVEMENTREQUESTINFO_CELL="cell";
    public static final String MOVEMENTREQUESTINFO_TEAM="team";
    public static final String MOVEMENTREQUESTINFO="MovementRequestInfo";
    public static final String REGISTRATIONREQUEST_TEAM="team";
    public static final String REGISTRATIONREQUEST="RegistrationRequest";
    public static final String MAPBROADCASTINFO_MAP="map";
    public static final String MAPBROADCASTINFO="MapBroadcastInfo";
    public static final String CELLANALYSIS_CELL="cell";
    public static final String CELLANALYSIS="CellAnalysis";
    public static final String CAPSULEREGISTRATIONINFO_CELL="cell";
    public static final String CAPSULEREGISTRATIONINFO_TEAM="team";
    public static final String CAPSULEREGISTRATIONINFO="CapsuleRegistrationInfo";
    public static final String MOVEMENTREQUESTSERVICE_MOVEMENTREQUESTINFO="movementRequestInfo";
    public static final String MOVEMENTREQUESTSERVICE="MovementRequestService";
    public static final String REGISTRATIONDESK="RegistrationDesk";
    public static final String MAPBROADCASTSERVICE_MAPBROADCASTINFO="mapBroadcastInfo";
    public static final String MAPBROADCASTSERVICE="MapBroadcastService";
    public static final String TERRAINSIMULATOR="TerrainSimulator";
    public static final String CELL_MINERAL="mineral";
    public static final String CELL_Y="y";
    public static final String CELL_X="x";
    public static final String CELL="Cell";
    public static final String CAPSULEREGISTRATIONSERVICE_CAPSULEREGISTRATIONINFO="capsuleRegistrationInfo";
    public static final String CAPSULEREGISTRATIONSERVICE="CapsuleRegistrationService";
    public static final String MAP_CELLLIST="cellList";
    public static final String MAP="Map";
    public static final String SERVICE="Service";
    public static final String ROVERREGISTRATIONSERVICE_ROVERREGISTRATIONINFO="roverRegistrationInfo";
    public static final String ROVERREGISTRATIONSERVICE="RoverRegistrationService";
    public static final String TEAM_TEAMID="teamId";
    public static final String TEAM="Team";

  /**
   * Constructor
  */
  private XplorationOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema teamSchema = new ConceptSchema(TEAM);
    add(teamSchema, org.xploration.ontology.Team.class);
    ConceptSchema roverRegistrationServiceSchema = new ConceptSchema(ROVERREGISTRATIONSERVICE);
    add(roverRegistrationServiceSchema, org.xploration.ontology.RoverRegistrationService.class);
    ConceptSchema serviceSchema = new ConceptSchema(SERVICE);
    add(serviceSchema, org.xploration.ontology.Service.class);
    ConceptSchema mapSchema = new ConceptSchema(MAP);
    add(mapSchema, org.xploration.ontology.Map.class);
    ConceptSchema capsuleRegistrationServiceSchema = new ConceptSchema(CAPSULEREGISTRATIONSERVICE);
    add(capsuleRegistrationServiceSchema, org.xploration.ontology.CapsuleRegistrationService.class);
    ConceptSchema cellSchema = new ConceptSchema(CELL);
    add(cellSchema, org.xploration.ontology.Cell.class);
    ConceptSchema terrainSimulatorSchema = new ConceptSchema(TERRAINSIMULATOR);
    add(terrainSimulatorSchema, org.xploration.ontology.TerrainSimulator.class);
    ConceptSchema mapBroadcastServiceSchema = new ConceptSchema(MAPBROADCASTSERVICE);
    add(mapBroadcastServiceSchema, org.xploration.ontology.MapBroadcastService.class);
    ConceptSchema registrationDeskSchema = new ConceptSchema(REGISTRATIONDESK);
    add(registrationDeskSchema, org.xploration.ontology.RegistrationDesk.class);
    ConceptSchema movementRequestServiceSchema = new ConceptSchema(MOVEMENTREQUESTSERVICE);
    add(movementRequestServiceSchema, org.xploration.ontology.MovementRequestService.class);

    // adding AgentAction(s)
    AgentActionSchema capsuleRegistrationInfoSchema = new AgentActionSchema(CAPSULEREGISTRATIONINFO);
    add(capsuleRegistrationInfoSchema, org.xploration.ontology.CapsuleRegistrationInfo.class);
    AgentActionSchema cellAnalysisSchema = new AgentActionSchema(CELLANALYSIS);
    add(cellAnalysisSchema, org.xploration.ontology.CellAnalysis.class);
    AgentActionSchema mapBroadcastInfoSchema = new AgentActionSchema(MAPBROADCASTINFO);
    add(mapBroadcastInfoSchema, org.xploration.ontology.MapBroadcastInfo.class);
    AgentActionSchema registrationRequestSchema = new AgentActionSchema(REGISTRATIONREQUEST);
    add(registrationRequestSchema, org.xploration.ontology.RegistrationRequest.class);
    AgentActionSchema movementRequestInfoSchema = new AgentActionSchema(MOVEMENTREQUESTINFO);
    add(movementRequestInfoSchema, org.xploration.ontology.MovementRequestInfo.class);
    AgentActionSchema roverRegistrationInfoSchema = new AgentActionSchema(ROVERREGISTRATIONINFO);
    add(roverRegistrationInfoSchema, org.xploration.ontology.RoverRegistrationInfo.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    teamSchema.add(TEAM_TEAMID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    roverRegistrationServiceSchema.add(ROVERREGISTRATIONSERVICE_ROVERREGISTRATIONINFO, roverRegistrationInfoSchema, ObjectSchema.MANDATORY);
    mapSchema.add(MAP_CELLLIST, cellSchema, 1, ObjectSchema.UNLIMITED);
    capsuleRegistrationServiceSchema.add(CAPSULEREGISTRATIONSERVICE_CAPSULEREGISTRATIONINFO, capsuleRegistrationInfoSchema, ObjectSchema.MANDATORY);
    cellSchema.add(CELL_X, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    cellSchema.add(CELL_Y, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    cellSchema.add(CELL_MINERAL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    mapBroadcastServiceSchema.add(MAPBROADCASTSERVICE_MAPBROADCASTINFO, mapBroadcastInfoSchema, ObjectSchema.MANDATORY);
    movementRequestServiceSchema.add(MOVEMENTREQUESTSERVICE_MOVEMENTREQUESTINFO, movementRequestInfoSchema, ObjectSchema.MANDATORY);
    capsuleRegistrationInfoSchema.add(CAPSULEREGISTRATIONINFO_TEAM, teamSchema, ObjectSchema.OPTIONAL);
    capsuleRegistrationInfoSchema.add(CAPSULEREGISTRATIONINFO_CELL, cellSchema, ObjectSchema.MANDATORY);
    cellAnalysisSchema.add(CELLANALYSIS_CELL, cellSchema, ObjectSchema.MANDATORY);
    mapBroadcastInfoSchema.add(MAPBROADCASTINFO_MAP, mapSchema, ObjectSchema.MANDATORY);
    registrationRequestSchema.add(REGISTRATIONREQUEST_TEAM, teamSchema, ObjectSchema.OPTIONAL);
    movementRequestInfoSchema.add(MOVEMENTREQUESTINFO_TEAM, teamSchema, ObjectSchema.OPTIONAL);
    movementRequestInfoSchema.add(MOVEMENTREQUESTINFO_CELL, cellSchema, ObjectSchema.MANDATORY);
    roverRegistrationInfoSchema.add(ROVERREGISTRATIONINFO_TEAM, teamSchema, ObjectSchema.OPTIONAL);
    roverRegistrationInfoSchema.add(ROVERREGISTRATIONINFO_CELL, cellSchema, ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    roverRegistrationServiceSchema.addSuperSchema(serviceSchema);
    capsuleRegistrationServiceSchema.addSuperSchema(serviceSchema);
    terrainSimulatorSchema.addSuperSchema(serviceSchema);
    mapBroadcastServiceSchema.addSuperSchema(serviceSchema);
    registrationDeskSchema.addSuperSchema(serviceSchema);
    movementRequestServiceSchema.addSuperSchema(serviceSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
